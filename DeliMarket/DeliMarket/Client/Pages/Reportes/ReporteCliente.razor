@inject IJSRuntime js
@inject IRepositorio repositorio
@inject IMostrarMensajes mostrarMensajes
@inject NavigationManager navigationManager
@page "/listaordenR"
<div class="h4">Reportin :D</div>

<div>
    <EditForm Model="rep" OnValidSubmit="data">
        <div class="form-group">
            <label>Año:</label>
            <div>
                <InputNumber class="form-control" @bind-Value="@ano" />
                <ValidationMessage For="@(() => ano)" />
            </div>
            <label for="meses">Meses:</label>

            <InputSelectNumber class="form-control"
                               ValueChanged="@((int value)=>cambioMes(value))"
                               ValueExpression="@(()=>mes)"
                               Value="mes">
                <option value="0">--Seleccione un mes</option>
                <option value="1">Enero</option>
                <option value="2">Febrero</option>
                <option value="3">Marzo</option>
                <option value="4">Abril</option>
                <option value="5">Mayo</option>
                <option value="6">Junio</option>
                <option value="7">Julio</option>
                <option value="8">Agosto</option>
                <option value="9">Septiembre</option>
                <option value="10">Octubre</option>
                <option value="11">Noviembre</option>
                <option value="12">Diciembre</option>
            </InputSelectNumber>

        </div>        
        <button type="submit" id="submitButton" class="btn btn-pill btn-outline-warning cloudy-knoxville-gradient waves-effect" >Mostrar</button>
    </EditForm>
</div>


<div class="card mt-4 mb-4 grey lighten-4">
    <div class="h3 card-header  mt-4 mb-4 text-center">Ordenes hechas en el dia</div>
    <canvas id="barcharts" width="701" height="350" readonly></canvas>
</div>

<div class="card mt-4">
    <div class=" table-responsive">
        <table class="table table-bordered ">
            <thead>
                <tr class="sunny-morning-gradient">
                    <th class="h5 text-center" scope="col">N° de Orden</th>
                    <th class="h5 text-center" scope="col">Fecha</th>
                    <th class="h5 text-center" scope="col">Producto</th>
                    <th class="h5 text-center" scope="col">Cantidad</th>
                    <th class="h5 text-center" scope="col">Precio</th>
                    <th class="h5 text-center" scope="col">Total Producto</th>
                    <th class="h5 text-center" scope="col">Total Orden</th>
                </tr>
            </thead>
            <ListadoGenerico Listado="Reporte">
                <HayRegistros Context="reporte">
                    <tr class="grey lighten-4">
                        <th class="text-center" scope="row">@reporte.OrdenID</th>
                        <td class="text-center">@reporte.FechaDia / @reporte.FechaMes / @reporte.FechaAno </td>
                        <td class="text-center">@reporte.nombreproducto</td>
                        <td class="text-center">@reporte.cantidad</td>
                        <td class="text-center">@reporte.precio</td>
                        <td class="text-center">@(reporte.cantidad*reporte.precio)</td>
                        <td class="text-center">@reporte.total</td>
                    </tr>
                </HayRegistros>
            </ListadoGenerico>
        </table>
    </div>
</div>

@code {
    [Parameter] public List<ProductoMercado> Productos { get; set; }
    private List<ReporteClienteDTO> Reporte { get; set; }
    ReporteClienteDTO rep { get; set; }
    private int mes { get; set; }
    private int ano { get; set; }

    protected void cambioMes(int value)
    {
        mes = value;
    }
    private async void data()
    {
        
        var responseHttp = await repositorio.Get<List<ReporteClienteDTO>>($"api/Reportes/FiltroCliente/{ano}/{mes}");

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("");
            }
            else
            {
                var mensajeError = await responseHttp.GetBody();
                await mostrarMensajes.MostrarMensajeError(mensajeError);
            }
        }
        else
        {
            Reporte = responseHttp.Response;
        }
        StateHasChanged();
        cuadro();
    }

    private async void cuadro()
    {

        await js.InvokeVoidAsync("barcharts", Reporte,mes);
        StateHasChanged();
    }

    protected async override Task OnInitializedAsync()
    {
        rep = new ReporteClienteDTO();
        //mes = System.DateTime.Now.Month;
        mes = System.DateTime.Now.Month;
        ano = System.DateTime.Now.Year;
        data();





    }
}
