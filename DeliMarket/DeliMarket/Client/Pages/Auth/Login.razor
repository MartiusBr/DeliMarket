@page "/login"

@inject IRepositorio repositorio
@inject NavigationManager navigationManager
@inject ILoginService loginService
@inject IMostrarMensajes mostrarMensajes

@using DeliMarket.Client.Auth

<h3>Login</h3>

<div class="row">
    <div class="col-md-6  p-4 border">
        <EditForm Model="@userLogin" OnValidSubmit="LoginUsuario">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label>Email:</label>
                <div>
                    <InputText Class="form-control" @bind-Value="@userLogin.Email" />
                    <ValidationMessage For="@(() => userLogin.Email)" />
                </div>
            </div>

            <div class="form-group">
                <label>Password:</label>
                <div>
                    <InputPassword Class="form-control" @bind-Value="@userLogin.Password" />
                    <ValidationMessage For="@(() => userLogin.Password)" />
                </div>
            </div>

            <button type="submit" class="btn btn-primary d-flex mx-auto">Login</button>

        </EditForm>

        <a class="dropdown-item text-center" href="#">Eres nuevo? Registrate</a>
        <a class="dropdown-item text-center" href="#">Olvidaste tu contraseña?</a>
    </div>
</div>



@code {
    private UserLogin userLogin = new UserLogin();

    private async Task LoginUsuario()
    {
        var httpResponse = await repositorio.Post<UserLogin, UserToken>("api/cuentas/login", userLogin);

        if (httpResponse.Error)
        {
            await mostrarMensajes.MostrarMensajeError(await httpResponse.GetBody());
        }
        else
        {
            await loginService.Login(httpResponse.Response);
            navigationManager.NavigateTo("");
        }
    }
}
