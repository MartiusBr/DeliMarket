@inject IJSRuntime js
@inject IRepositorio repositorio
@inject IMostrarMensajes mostrarMensajes
@inject NavigationManager navigationManager
@page "/listaordenC"

<h1>Lista de ordenes Cliente</h1>
<div class="row mt-2">




    <table class="table">       
        <ListadoGenerico Listado="Ordenes">
            <HayRegistros Context="orden">
                <tr>
                    <td>
                        <div class="col">
                            <h5>@orden.FechaCreacion.Value.ToShortDateString()</h5>
                            Items:
                            <strong>@orden.CantidadTotal</strong>;
                            Precio Total:
                            <strong>@orden.Montototal</strong>
                        </div>
                    </td>
                    <td>
                        <div class="col">
                            @switch (orden.Estado)
                            {
                                case 1:
                                    estados = "disponible";
                                    break;
                                case 2:
                                    estados = "procesando";
                                    break;
                                case 3:
                                    estados = " enviando";
                                    break;
                                case 4:
                                    estados = "completado";
                                    break;

                            }
                            Status: <strong>@estados</strong>
                        </div>
                    </td>
                    <td>
                        <button type="button" class="btn btn-danger btn-rounded" @onclick="@(e=> ActualizarEstado(5,orden.Id))">Cancelar</button>
                    </td>
                   

                </tr>
            </HayRegistros>
        </ListadoGenerico>
    </table>
</div>



@code {
    [Parameter] public List<ProductoMercado> Productos { get; set; }
    private List<Orden> Ordenes { get; set; }
    string estados { get; set; }
    protected async Task Lista()
    {
        var responseHttp = await repositorio.Get<List<Orden>>($"api/ordenes/ListaOrdenPersonalizada");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("");
            }
            else
            {
                var mensajeError = await responseHttp.GetBody();
                await mostrarMensajes.MostrarMensajeError(mensajeError);
            }
        }
        else
        {
            Ordenes = responseHttp.Response;

        }
    }

    protected async override Task OnInitializedAsync()
    {
        await Lista();
    }

    protected async Task ActualizarEstado(int estado, int id)
    {

        var rpta = await repositorio.Get<int>($"api/ordenes/ActualizarEstadoOrden/{estado}/{id}");
        if (rpta.Response == 0)
        {
            await mostrarMensajes.MostrarMensajeInformativo("Su orden se esta enviado o ya se completo");
        }
        else if(rpta.Response == 1)
        {
            await mostrarMensajes.MostrarMensajeExitoso("Su orden se cancelo con exito");
        }
        else
        {
            await mostrarMensajes.MostrarMensajeInformativo("Su orden se elimino con exito");
        }

        await Lista();

    }

}
