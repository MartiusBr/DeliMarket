@page "/productos/buscar"
@inject IRepositorio repositorio
@inject NavigationManager navigationManager

<h3>Filtro Productos</h3>

<div class="form-inline">
    <div class="form-group mb-2">
        <label for="titulo" class="sr-only">Título</label>
        <input @bind-value="titulo" @bind-value:event="oninput"
               @onkeypress="@((KeyboardEventArgs e) => TituloKeyPress(e))"
               type="text" class="form-control" id="titulo" placeholder="Título Productos" />
    </div>
    <div class="form-group mx-sm-3 mb-2">
        <select class="form-control" @bind="categoriaSeleccionado">
            <option value="0">--Seleccione una categoria--</option>
            @foreach (var item in categorias)
            {
                <option value="@item.Id">@item.Nombre</option>
            }
        </select>
    </div>
    <div class="form-group mx-sm-3 mb-2">
        <input type="checkbox" class="form-check-input" id="entregaProgramada" @bind="entregaProgramada" />
        <label class="form-check-label" for="entregaProgramada">
            Entrega Programada
        </label>
    </div>
    <div class="form-group mx-sm-3 mb-2">
        <input type="checkbox" class="form-check-input" id="entregaRapida" @bind="entregaRapida" />
        <label class="form-check-label" for="entregaRapida">
            Entrega Rápida
        </label>
    </div>
    <div class="form-group mx-sm-3 mb-2">
        <input type="checkbox" class="form-check-input" id="masVotadas" @bind="masVotadas" />
        <label class="form-check-label" for="masVotadas">
            Más Votadas
        </label>
    </div>

    <button type="button" class="btn btn-primary mb-2 mx-sm-3" @onclick="CargarNuevasProductos">Filtrar</button>
    <button type="button" class="btn btn-danger mb-2" @onclick="LimpiarOnClick">Limpiar</button>
</div>

<ListadoProductos Productos="Productos"></ListadoProductos>

<Paginacion PaginaActual="paginaActual" PaginasTotales="paginasTotales" 
            PaginaSeleccionada="PaginaSeleccionada" />

@code {
    private List<Producto> Productos;
    string titulo = "";
    string categoriaSeleccionado = "0";
    private bool entregaProgramada = false;
    private bool entregaRapida = false;
    private bool masVotadas = false;
    private List<Categoria> categorias = new List<Categoria>();
    Dictionary<string, string> queryStringsDict = new Dictionary<string, string>();
    private int paginaActual = 1;
    private int paginasTotales;

    protected override async Task OnInitializedAsync()
    {
        await ObtenerCategorias();

        var url = navigationManager.Uri;

        var queries = navigationManager.ObtenerQueryStrings(url);

        if (queries == null)
        {
            await RealizarBusqueda(string.Empty);
        }
        else
        {
            queryStringsDict = queries;
            LlenarCampos();
            var queryStrings = url.Split(new string[] { "?" }, StringSplitOptions.None)[1];
            await RealizarBusqueda(queryStrings);
        }
    }

    private void LlenarCampos()
    {
        if (queryStringsDict.ContainsKey("categoriaid"))
        {
            categoriaSeleccionado = queryStringsDict["categoriaid"];
        }

        if (queryStringsDict.ContainsKey("titulo"))
        {
            titulo = queryStringsDict["titulo"];
        }

        if (queryStringsDict.ContainsKey("entregarapida"))
        {
            bool.TryParse(queryStringsDict["entregarapida"], out entregaRapida);
        }

        if (queryStringsDict.ContainsKey("entregaprogramada"))
        {
            bool.TryParse(queryStringsDict["entregaprogramada"], out entregaProgramada);
        }

        if (queryStringsDict.ContainsKey("masvotadas"))
        {
            bool.TryParse(queryStringsDict["masvotadas"], out masVotadas);
        }

        if (queryStringsDict.ContainsKey("pagina"))
        {
            int.TryParse(queryStringsDict["pagina"], out paginaActual);
        }
    }

    private async Task PaginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await CargarNuevasProductos();
    }

    private async Task ObtenerCategorias()
    {
        var httpResponse = await repositorio.Get<List<Categoria>>("api/categorias");
        categorias = httpResponse.Response;
    }

    private async Task TituloKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await CargarNuevasProductos();
        }
    }

    private async Task CargarNuevasProductos()
    {
        var queryStrings = GenerarQueryStrings();
        navigationManager.NavigateTo("/productos/buscar?" + queryStrings);
        await RealizarBusqueda(queryStrings);
    }

    private async Task RealizarBusqueda(string queryStrings)
    {
        var httpResponse = await repositorio.Get<List<Producto>>("api/productos/filtrar?" + queryStrings);
        paginasTotales = int.Parse(httpResponse.HttpResponseMessage.Headers.GetValues("totalPaginas").FirstOrDefault());
        Productos = httpResponse.Response;
    }

    private string GenerarQueryStrings()
    {
        if (queryStringsDict == null) { queryStringsDict = new Dictionary<string, string>(); }
        queryStringsDict["categoriaid"] = categoriaSeleccionado;
        queryStringsDict["titulo"] = titulo;
        queryStringsDict["entregarapida"] = entregaRapida.ToString();
        queryStringsDict["entregaprogramada"] = entregaProgramada.ToString();
        queryStringsDict["masvotadas"] = masVotadas.ToString();
        queryStringsDict["pagina"] = paginaActual.ToString();

        var valoresPorDefecto = new List<string>() { "false", "", "0" };

        // categoriaid=7&titulo=spider ...

        return string.Join("&", queryStringsDict
            .Where(x => !valoresPorDefecto.Contains(x.Value.ToLower()))
            .Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}").ToArray());
    }

    private async Task LimpiarOnClick()
    {
        titulo = "";
        categoriaSeleccionado = "0";
        entregaProgramada = false;
        entregaRapida = false;
        masVotadas = false;
        paginaActual = 1;
        await CargarNuevasProductos();
    }
}
