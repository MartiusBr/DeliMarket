@inject IRepositorio repositorio

    <EditForm Model="Producto" OnValidSubmit="OnDataAnnonationsValidated"> 
        <DataAnnotationsValidator />
        <div class="form-group">
            <label>Título:</label>
            <div>
                <InputText class="form-control" @bind-Value="@Producto.Titulo" />
                <ValidationMessage For="@(() => Producto.Titulo)" />
            </div>
        </div>
        <div class="form-group">
            <label>Entrega Rápida:</label>
            <div>
                <InputCheckbox @bind-Value="@Producto.EntregaRapida" />
                <ValidationMessage For="@(() => Producto.EntregaRapida)" />
            </div>
            <label>Entrega Programada:</label>
            <div>
                <InputCheckbox @bind-Value="@Producto.EntregaProgramada" />
                <ValidationMessage For="@(() => Producto.EntregaProgramada)" />
            </div>
        </div>
        <div class="form-group">
            <label>Fecha Lanzamiento:</label>
            <div>
                <InputDate class="form-control" @bind-Value="@Producto.Lanzamiento" />
                <ValidationMessage For="@(() => Producto.Lanzamiento)" />
            </div>
        </div>
        <div class="form-group">
            <InputImg Label="Foto" ImagenSeleccionada="ImagenSeleccionada" ImagenTemporal="@posterTemporal" />
        </div>
        <div class="form-group">
            <label>Categorias:</label>
            <div>
                <SelectorMultiple Seleccionados="Seleccionados"
                                  NoSeleccionados="NoSeleccionados"></SelectorMultiple>
            </div>
        </div>
        <div class="form-group">
            <label>Mercados:</label>
            <div>
                <SelectorMultipleTypeahead Context="mercado"
                                           SearchMethod="BuscarMercados"
                                           ElementosSeleccionados="MercadosSeleccionados">
                    <MyListTemplate>
                        @mercado.Nombre / <input type="text" placeholder="Dueño" @bind="mercado.Duenio" />
                    </MyListTemplate>
                    <MyResultTemplate>
                        <img style="width: 50px" src="@mercado.Foto" />
                        @mercado.Nombre
                    </MyResultTemplate>
                </SelectorMultipleTypeahead>
            </div>
        </div>
        <div class="form-group container">
            <div class="row">
                <InputMarkdown @bind-Value="@Producto.Resumen"
                               For="@(() => Producto.Resumen)"
                               Label="Resumen" />
            </div>
        </div>

        <button type="submit" class="btn btn-success">Salvar Producto</button>
    </EditForm>

@code {
    [Parameter] public Producto Producto { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public List<Categoria> CategoriasSeleccionados { get; set; } = new List<Categoria>();
    [Parameter] public List<Categoria> CategoriasNoSeleccionados { get; set; } = new List<Categoria>();
    [Parameter] public List<Mercado> MercadosSeleccionados { get; set; } = new List<Mercado>();

    private List<SelectorMultipleModel> Seleccionados { get; set; } = new List<SelectorMultipleModel>();
    private List<SelectorMultipleModel> NoSeleccionados { get; set; } = new List<SelectorMultipleModel>();
    private string posterTemporal;

    protected override void OnInitialized()
    {
        Seleccionados = CategoriasSeleccionados.Select(x => new SelectorMultipleModel(x.Id.ToString(), x.Nombre)).ToList();
        NoSeleccionados = CategoriasNoSeleccionados.Select(x => new SelectorMultipleModel(x.Id.ToString(), x.Nombre)).ToList();
        if (!string.IsNullOrWhiteSpace(Producto.Poster))
        {
            posterTemporal = Producto.Poster;
            Producto.Poster = null;
        }
    }

    private void ImagenSeleccionada(string imagenBase64)
    {
        Producto.Poster = imagenBase64;
    }

    private async Task<IEnumerable<Mercado>> BuscarMercados(string searchText)
    {
        var responseHttp = await repositorio.Get<List<Mercado>>($"api/mercados/buscar/{searchText}");
        return responseHttp.Response;
    }

    private async Task OnDataAnnonationsValidated()
    {
        Producto.CategoriasProducto = Seleccionados
            .Select(x => new CategoriaProducto { CategoriaId = int.Parse(x.Llave) }).ToList();

        Producto.ProductosMercado = MercadosSeleccionados
            .Select(x => new ProductoMercado { MercadoId = x.Id, Duenio = x.Duenio }).ToList();

        if (!string.IsNullOrWhiteSpace(Producto.Poster)) { posterTemporal = null; }

        await OnValidSubmit.InvokeAsync(null);
    }
}
