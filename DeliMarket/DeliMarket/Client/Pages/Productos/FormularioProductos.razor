@inject IRepositorio repositorio

<EditForm Model="Producto" OnValidSubmit="OnDataAnnonationsValidated">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label>Título:</label>
        <div>
            <InputText class="form-control" @bind-Value="@Producto.Titulo" />
            <ValidationMessage For="@(() => Producto.Titulo)" />
        </div>
    </div>
    <div class="form-group">
        <label>Entrega Rápida:</label>
        <div>
            <InputCheckbox @bind-Value="@Producto.EntregaRapida" />
            <ValidationMessage For="@(() => Producto.EntregaRapida)" />
        </div>
    </div>
    <div class="form-group">
        <label>Trailer:</label>
        <div>
            <InputText class="form-control" @bind-Value="@Producto.Trailer" />
            <ValidationMessage For="@(() => Producto.Trailer)" />
        </div>
    </div>
    <div class="form-group">
        <label>Fecha Lanzamiento:</label>
        <div>
            <InputDate class="form-control" @bind-Value="@Producto.Lanzamiento" />
            <ValidationMessage For="@(() => Producto.Lanzamiento)" />
        </div>
    </div>
    <div class="form-group form-markdown">
        <InputMarkdown @bind-Value="@Producto.Resumen"
                       For="@(() => Producto.Resumen)"
                       Label="Resumen" />
    </div>
    <div class="form-group">
        <InputImg Label="Foto" ImagenSeleccionada="ImagenSeleccionada" ImagenTemporal="@posterTemporal" />
    </div>
    <div class="form-group">
        <label>Géneros:</label>
        <div>
            <SelectorMultiple Seleccionados="Seleccionados"
                              NoSeleccionados="NoSeleccionados"></SelectorMultiple>
        </div>
    </div>
    <div class="form-group">
        <label>Actores:</label>
        <div>
            <SelectorMultipleTypeahead Context="persona"
                                       SearchMethod="BuscarActores"
                                       ElementosSeleccionados="ActoresSeleccionados">
                <MyListTemplate>
                    @persona.Nombre / <input type="text" placeholder="Personaje" @bind="persona.Personaje" />
                </MyListTemplate>
                <MyResultTemplate>
                    <img style="width: 50px" src="@persona.Foto" />
                    @persona.Nombre
                </MyResultTemplate>
            </SelectorMultipleTypeahead>
        </div>
    </div>

    <button type="submit" class="btn btn-success">Salvar Producto</button>
</EditForm>

@code {
    [Parameter] public Producto Producto { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public List<Categoria> CategoriasSeleccionados { get; set; } = new List<Categoria>();
    [Parameter] public List<Categoria> CategoriasNoSeleccionados { get; set; } = new List<Categoria>();
    [Parameter] public List<Persona> ActoresSeleccionados { get; set; } = new List<Persona>();

    private List<SelectorMultipleModel> Seleccionados { get; set; } = new List<SelectorMultipleModel>();
    private List<SelectorMultipleModel> NoSeleccionados { get; set; } = new List<SelectorMultipleModel>();
    private string posterTemporal;

    protected override void OnInitialized()
    {
        Seleccionados = CategoriasSeleccionados.Select(x => new SelectorMultipleModel(x.Id.ToString(), x.Nombre)).ToList();
        NoSeleccionados = CategoriasNoSeleccionados.Select(x => new SelectorMultipleModel(x.Id.ToString(), x.Nombre)).ToList();
        if (!string.IsNullOrWhiteSpace(Producto.Poster))
        {
            posterTemporal = Producto.Poster;
            Producto.Poster = null;
        }
    }

    private void ImagenSeleccionada(string imagenBase64)
    {
        Producto.Poster = imagenBase64;
    }

    private async Task<IEnumerable<Persona>> BuscarActores(string searchText)
    {
        var responseHttp = await repositorio.Get<List<Persona>>($"api/personas/buscar/{searchText}");
        return responseHttp.Response;
    }

    private async Task OnDataAnnonationsValidated()
    {
        Producto.CategoriasProducto = Seleccionados
            .Select(x => new CategoriaProducto { CategoriaId = int.Parse(x.Llave) }).ToList();

        Producto.PeliculasActor = ActoresSeleccionados
            .Select(x => new PeliculaActor { PersonaId = x.Id, Personaje = x.Personaje }).ToList();

        if (!string.IsNullOrWhiteSpace(Producto.Poster)) { posterTemporal = null; }

        await OnValidSubmit.InvokeAsync(null);
    }
}
