@inject IRepositorio repositorio


    <div class="row">
        <div class="col-xl-6 col-md-12">
            <div class="ms-panel ms-panel-fh">
                <div class="ms-panel-header">
                    <h6>Add Product Form</h6>
                </div>
                <div class="ms-panel-body">
                    <EditForm Model="Producto" OnValidSubmit="OnDataAnnonationsValidated">
                        <DataAnnotationsValidator />
                        <div class="form-row">
                            <div class="col-md-12 mb-3">
                                <label>Nombre del producto</label>
                                <div class="input-group">
                                    <InputText class="form-control" placeholder="Nombre del producto" @bind-Value="@Producto.Titulo" />
                                    <ValidationMessage For="@(() => Producto.Titulo)" />
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label>Entrega Rápida:</label>
                                <div>
                                    <InputCheckbox @bind-Value="@Producto.EntregaRapida" />
                                    <ValidationMessage For="@(() => Producto.EntregaRapida)" />
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label>Entrega Programada:</label>
                                <div>
                                    <InputCheckbox @bind-Value="@Producto.EntregaProgramada" />
                                    <ValidationMessage For="@(() => Producto.EntregaProgramada)" />
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label>Fecha Lanzamiento:</label>
                                <div>
                                    <InputDate class="form-control" @bind-Value="@Producto.Lanzamiento" />
                                    <ValidationMessage For="@(() => Producto.Lanzamiento)" />
                                </div>
                            </div>
                            <div class="col-md-12 mb-3">
                                <label>Categorias:</label>
                                <div>
                                    <SelectorMultiple Seleccionados="Seleccionados"
                                                      NoSeleccionados="NoSeleccionados"></SelectorMultiple>
                                </div>
                            </div>
                            <div class="col-md-12 mb-3">
                                <label>Descripción</label>
                                <div class="input-group">
                                    <InputTextArea rows="5" class="form-control" placeholder="Message" @bind-Value="@Producto.Resumen" />
                                    <ValidationMessage For="@(() => Producto.Resumen)" />
                                </div>
                            </div>
                            <div class="col-md-12 mb-3">
                                    <InputImg Label="Foto" ImagenSeleccionada="ImagenSeleccionada"/>
                            </div>
                        </div>
                        <button class="btn btn-primary d-block" type="submit">Guardar y continuar</button>
                    </EditForm>
                </div>
            </div>
        </div>

        <div class="col-xl-6 col-md-12">
            <div class="row">
                <div class="col-md-12">
                    <div class="ms-panel">
                        <div class="ms-panel-header">
                            <h6>Imagen Producto </h6>
                        </div>
                        <div class="ms-panel-body">
                            @if (posterTemporal != null)
	                        {
                                <img class="d-block w-100" src="@posterTemporal" alt="First slide">
                            }
                            else
                            {
                                <img class="d-block w-100" src="https://via.placeholder.com/565x375" alt="First slide">   
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    

    @code {
        [Parameter] public Producto Producto { get; set; }
        [Parameter] public EventCallback OnValidSubmit { get; set; }
        [Parameter] public List<Categoria> CategoriasSeleccionados { get; set; } = new List<Categoria>();
        [Parameter] public List<Categoria> CategoriasNoSeleccionados { get; set; } = new List<Categoria>();
        [Parameter] public List<Mercado> MercadosSeleccionados { get; set; } = new List<Mercado>();

        private List<SelectorMultipleModel> Seleccionados { get; set; } = new List<SelectorMultipleModel>();
        private List<SelectorMultipleModel> NoSeleccionados { get; set; } = new List<SelectorMultipleModel>();
        private string posterTemporal;

        protected override void OnInitialized()
        {
            Seleccionados = CategoriasSeleccionados.Select(x => new SelectorMultipleModel(x.Id.ToString(), x.Nombre)).ToList();
            NoSeleccionados = CategoriasNoSeleccionados.Select(x => new SelectorMultipleModel(x.Id.ToString(), x.Nombre)).ToList();
            if (!string.IsNullOrWhiteSpace(Producto.Poster))
            {
                posterTemporal = Producto.Poster;
                Producto.Poster = null;
            }
        }

        private void ImagenSeleccionada(string imagenBase64)
        {
            Producto.Poster = imagenBase64;
            posterTemporal = null;
        }

        private async Task<IEnumerable<Mercado>> BuscarMercados(string searchText)
        {
            var responseHttp = await repositorio.Get<List<Mercado>>($"api/mercados/buscar/{searchText}");
            return responseHttp.Response;
        }

        private async Task OnDataAnnonationsValidated()
        {
            Producto.CategoriasProducto = Seleccionados
                .Select(x => new CategoriaProducto { CategoriaId = int.Parse(x.Llave) }).ToList();

            Producto.ProductosMercado = MercadosSeleccionados
                .Select(x => new ProductoMercado { MercadoId = x.Id, Propietario = x.Propietario }).ToList();

            if (!string.IsNullOrWhiteSpace(Producto.Poster)) { posterTemporal = null; }

            await OnValidSubmit.InvokeAsync(null);
        }
    }
