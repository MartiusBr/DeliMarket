@page "/producto/{ProductoId:int}"
@page "/producto/{ProductoId:int}/{NombreProducto}"
@inject IRepositorio repositorio
@inject NavigationManager navigationManager
@inject IMostrarMensajes mostrarMensajes

@if (model == null)
{
    <text>Cargando...</text>
}
else
{
    <div class="row">
        <div class="col-md-12">
            <div class="ms-panel">
                <div class="ms-panel-header">
                    <h6>Detalles del producto</h6>
                </div>
                <div class="ms-panel-body">
                    <img class="d-block mr-auto ml-auto" src="@model.Producto.Poster" alt="poster del producto">
                    <div class="carousel-caption d-none d-md-block mt-3">
                        <h3 class="text-white">@model.Producto.Titulo</h3>
                    </div>
                </div>
            </div>
        </div>

        <div class=" col-md-6">
            <div class="ms-panel ms-panel-fh">
                <div class="ms-panel-body">
                    <h2 class="section-title bold">Info del Producto</h2>
                    <table class="table ms-profile-information">
                        <tbody>
                            <tr>
                                <th scope="row">Categoría del Prod.</th>
                                <td>
                                    <span class="badge badge-pill badge-primary">
                                        @for (int i = 0; i < model.Categorias.Count; i++)
                                        {
                                            if (i < model.Categorias.Count - 1)
                                            {
                                                @enlaceCategoria(model.Categorias[i])<text>, </text>
                                            }
                                            else
                                            {
                                                @enlaceCategoria(model.Categorias[i])
                                            }
                                        }
                                    </span>
                                </td>
                            </tr>
                            <tr>
                                <th scope="row">Fecha de Creación</th>
                                <td>
                                    <span class="badge badge-pill badge-primary">
                                        @model.Producto.Lanzamiento.Value.ToString("dd MMM yyyy")
                                    </span>
                                </td>
                            </tr>
                            <tr>
                                <th scope="row">Promedio Votos</th>
                                <td>
                                    <span class="badge badge-pill badge-primary">
                                        @model.PromedioVotos.ToString("0.#") / 5
                                    </span>
                                </td>
                            </tr>
                            <tr>
                                <th scope="row">Tu voto</th>
                                <td>
                                    <Rating MaximoPuntaje="5" PuntajeSeleccionado="model.VotoUsuario" OnVote="OnVote" />
                                </td>
                            </tr>
                            <tr>
                                <th scope="row"></th>
                                <td></td>
                            </tr>

                        </tbody>
                    </table>
                    @if (mostrarCamposEdit)
                    {
                    <EditForm Model="ProdMercado" OnValidSubmit="AgregarProdMercado">
                        <DataAnnotationsValidator />
                        <div class="form-group">
                            <label>Precio:</label>
                            <div>
                                <InputNumber class="form-control" @bind-Value="@ProdMercado.precio" />
                                <ValidationMessage For="@(() => ProdMercado.precio)" />
                            </div>
                            <label>Stock:</label>
                            <div>
                                <InputNumber class="form-control" @bind-Value="@ProdMercado.stock" />
                                <ValidationMessage For="@(() => ProdMercado.stock)" />
                            </div>
                        </div>
                        <button class="btn btn-success" type="submit">Guardar Cambios</button>
                    </EditForm>
                    }
                    <AuthorizeView Roles="admin">
                        <Authorized>
                            <a class="btn btn-info" href="productos/editar/@model.Producto.Id">Editar</a>
                        </Authorized>
                    </AuthorizeView>
                    <AuthorizeView Roles="mercado">
                        <Authorized>
                            <button class="btn btn-info" @onclick="MostrarEditProdMercado">@txtbtnedit</button>
                        </Authorized>
                    </AuthorizeView>
                </div>
            </div>
        </div>

        <div class=" col-md-6">
            <div class="ms-panel ms-panel-fh">
                <div class="ms-panel-body">
                    <h4 class="section-title bold">Detalles del producto </h4>
                    <p class="description">
                        @model.Producto.Resumen
                    </p>
                </div>
                <AuthorizeView Roles="admin">
                    <Authorized>
                        <div class="ms-quick-stats">
                            <div class="ms-stats-grid">
                                <i class="fa fa-bullhorn"></i>
                                <p class="ms-text-dark">1,033</p>
                                <span>Ordenes Hoy</span>
                            </div>
                            <div class="ms-stats-grid">
                                <i class="fa fa-heart"></i>
                                <p class="ms-text-dark">3,039</p>
                                <span>Favoritos</span>
                            </div>
                        </div>
                    </Authorized>
                </AuthorizeView>
            </div>
        </div>
    </div>

}

@code {
    [Parameter] public int ProductoId { get; set; }
    [Parameter] public string NombreProducto { get; set; }
    private bool mostrarCamposEdit = false;
    private string txtbtnedit = "Agregar Precio y Stock";
    public ProdMercado ProdMercado { get; set; } = new ProdMercado();


    private ProductoVisualizarDTO model;
    private RenderFragment<Categoria> enlaceCategoria = (categoria) =>@<a style="color:#FFF;" href="productos/buscar?categoriaid=@categoria.Id">@categoria.Nombre</a>;

    private async Task OnVote(int votoSeleccionado)
    {
        model.VotoUsuario = votoSeleccionado;
        var votoProducto = new VotoProducto() { Voto = votoSeleccionado, ProductoId = ProductoId };
        var responseHttp = await repositorio.Post("api/votos", votoProducto);
        if (responseHttp.Error)
        {
            await mostrarMensajes.MostrarMensajeError("Su voto no ha sido recibido");
        }
        else
        {
            await mostrarMensajes.MostrarMensajeExitoso("Su voto ha sido recibido");
        }
    }

    protected async override Task OnInitializedAsync()
    {
        var responseHttp = await repositorio.Get<ProductoVisualizarDTO>($"api/productos/{ProductoId}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("");
            }
            else
            {
                var mensajeError = await responseHttp.GetBody();
                await mostrarMensajes.MostrarMensajeError(mensajeError);
            }
        }
        else
        {
            model = responseHttp.Response;
        }
    }

    private void MostrarEditProdMercado()
    {
        mostrarCamposEdit = !mostrarCamposEdit;
        //txtbtnedit = "Cancelar";
    }

    private async void AgregarProdMercado()
    {
        var responseHttp = await repositorio.Post($"api/productos/seleccionar/{ProductoId}", ProdMercado);
        if (responseHttp.Error)
        {
            await mostrarMensajes.MostrarMensajeError("No se puedo guardar los cambios");
        }
        else
        {
            await mostrarMensajes.MostrarMensajeExitoso("Se agregó a sus productos");
            navigationManager.NavigateTo("misProductos");
        }
    }
}
