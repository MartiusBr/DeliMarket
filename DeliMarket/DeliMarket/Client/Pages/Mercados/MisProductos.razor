@page "/misProductos"
@inject IRepositorio repositorio
@inject NavigationManager navigationManager
@inject IMostrarMensajes mostrarMensajes
@inject IJSRuntime js

<h3>Mis Productos</h3>

<div class="row mt-2">
    <ListadoGenerico Listado="ProductosMercado">
        <HayRegistros Context="producto">
            <ProductoIndividualMercado Producto="producto" EliminarProducto="EliminarProducto" />
        </HayRegistros>
    </ListadoGenerico>
</div>

@*<ListadoProductos Productos="ProductosMercado"></ListadoProductos>*@

@*<Paginacion PaginaActual="paginaActual" PaginasTotales="paginasTotales"
    PaginaSeleccionada="PaginaSeleccionada" />*@

@code {

    private List<Producto> ProductosMercado;
    private string urlProducto = string.Empty;
    //private int paginaActual = 1;
    //private int paginasTotales;

    protected override async Task OnInitializedAsync()
    {
        var httpResponse = await repositorio.Get<List<Producto>>("api/productos/productosMercado");
        //paginasTotales = int.Parse(httpResponse.HttpResponseMessage.Headers.GetValues("totalPaginas").FirstOrDefault());
        if (httpResponse.Error)
        {
            await mostrarMensajes.MostrarMensajeError("Error al cargar los productos del mercado");
        }
        else
        {
            ProductosMercado = httpResponse.Response;
        }
    }
    async Task EliminarProducto(Producto producto)
    {
        var confirmar = await js.Confirm($"¿Desea borrar el producto {producto.Titulo}?");
        if (confirmar)
        {
            var responseHttp = await repositorio.Delete($"api/productos/DeleteProductoMercado/{producto.Id}");
            if (responseHttp.Error)
            {
                await mostrarMensajes.MostrarMensajeError(await responseHttp.GetBody());
            }
            else
            {
                ProductosMercado.Remove(producto);
            }
        }
    }

}
